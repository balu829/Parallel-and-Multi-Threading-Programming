package chandana;

import java.util.List;

import chandana.SimulationEvent;

/**
 * 
 * @author Bala Krishna
 */
/**
 * Validates a simulation
 */
public class Validate {
	private static class InvalidSimulationException extends Exception {
		public InvalidSimulationException() { }
	};

	// Helper method for validating the simulation
	private static void check(boolean check,
			String message) throws InvalidSimulationException {
		if (!check) {
			System.err.println("SIMULATION INVALID : "+message);
			throw new Validate.InvalidSimulationException();
		}
	}

	/** 
	 * Validates the given list of events is a valid simulation.
	 * Returns true if the simulation is valid, false otherwise.
	 *
	 * @param events - a list of events generated by the simulation
	 *   in the order they were generated.
	 *
	 * @returns res - whether the simulation was valid or not
	 */
	public static boolean validateSimulation(List<SimulationEvent> events, int numTables, int numCooks, int machineCapacity, int numCustomers) {
		try {
			check(events.get(0).event == SimulationEvent.EventType.SimulationStarting,
					"Simulation didn't start with initiation event");
			check(events.get(events.size()-1).event == 
					SimulationEvent.EventType.SimulationEnded,
					"Simulation didn't end with termination event");

			/* In hw3 you will write validation code for things such as:
				Should not have more eaters than specified
				Should not have more cooks than specified
				The coffee shop capacity should not be exceeded
				The capacity of each machine should not be exceeded
				Eater should not receive order until cook completes it
				Eater should not leave coffee shop until order is received
				Eater should not place more than one order
				Cook should not work on order before it is placed
			 */
			// The coffee shop capacity should not be exceeded
			check(validateShopCapacity(events, numTables), "More customers than tables in the shop");
			
			//Should not have more cooks than specified
			check(vakidateNumCooks(events,numCooks), "There are more cooks than specified");
			
			//The capacity of each machine should not be exceeded
			check(validateGrillMachineCapacity(events, machineCapacity), "Grill Machine has more items than capacity");
			check(validateFrierMachineCapacity(events, machineCapacity), "Frier Machine has more items than capacity");
			check(validateStarMachineCapacity(events, machineCapacity), "Star Machine has more items than capacity");
			
			////Eater should not place more than one order
			check(validateCustomerOrder(events, numCustomers), "A Customer placed more than one order");
			
			check(validateCustReceiveOrder(events, numCustomers),"Customer left before receiving order");

			return true;
		} catch (InvalidSimulationException e) {
			return false;
		}
	}
	
	// The coffee shop capacity should not be exceeded
	private static boolean validateShopCapacity(List<SimulationEvent> events, int numTables){
		boolean checkCap = true;
		int custNo = 0;
		for(SimulationEvent event: events) {
			if(event.event == SimulationEvent.EventType.CustomerEnteredCoffeeShop) {
				custNo++;
			}
			if(event.event == SimulationEvent.EventType.CustomerLeavingCoffeeShop) {
				custNo--;
			}
		}
		if(custNo>numTables) {
			checkCap = false;
		}
		return checkCap;
	}
	
	//Should not have more cooks than specified
	private static boolean vakidateNumCooks(List<SimulationEvent> events, int numCooks) {
		boolean checkCookNo = true;
		int cookNo = 0;
		for(SimulationEvent event: events) {
			if(event.event == SimulationEvent.EventType.CookStarting) {
				cookNo++;
			}
		}
		
		if(cookNo!=numCooks) {
			checkCookNo = false;
		}
		return checkCookNo;
	}
	
	//The capacity of each machine should not be exceeded
	private static boolean validateGrillMachineCapacity(List<SimulationEvent> events, int machineCapacity) {
		boolean machineCap = true;
		int currCap = 0;
		for(SimulationEvent event: events) {
			if(event.event == SimulationEvent.EventType.MachineStartingFood) {
				if(event.machine.machineName.equalsIgnoreCase("Grill")) {
					currCap++;
				}
			}
			if(event.event == SimulationEvent.EventType.MachineDoneFood) {
				if(event.machine.machineName.equalsIgnoreCase("Grill")) {
					currCap--;
				}
			}
			
		}
		
		if(currCap > machineCapacity) {
			machineCap = false;
		}
		return machineCap;
	}
	
	private static boolean validateFrierMachineCapacity(List<SimulationEvent> events, int machineCapacity) {
		boolean machineCap = true;
		int currCap = 0;
		for(SimulationEvent event: events) {
			if(event.event == SimulationEvent.EventType.MachineStartingFood) {
				if(event.machine.machineName.equalsIgnoreCase("Frier")) {
					currCap++;
				}
			}
			if(event.event == SimulationEvent.EventType.MachineDoneFood) {
				if(event.machine.machineName.equalsIgnoreCase("Frier")) {
					currCap--;
				}
			}
			
		}
		
		if(currCap > machineCapacity) {
			machineCap = false;
		}
		return machineCap;
	}
	
	private static boolean validateStarMachineCapacity(List<SimulationEvent> events, int machineCapacity) {
		boolean machineCap = true;
		int currCap = 0;
		for(SimulationEvent event: events) {
			if(event.event == SimulationEvent.EventType.MachineStartingFood) {
				if(event.machine.machineName.equalsIgnoreCase("Star")) {
					currCap++;
				}
			}
			if(event.event == SimulationEvent.EventType.MachineDoneFood) {
				if(event.machine.machineName.equalsIgnoreCase("Star")) {
					currCap--;
				}
			}
			
		}
		
		if(currCap > machineCapacity) {
			machineCap = false;
		}
		return machineCap;
	}
	
	//Eater should not place more than one order
	private static boolean validateCustomerOrder(List<SimulationEvent> events, int customers) {
		boolean custOrder = true;
		int orders = 0;
		for(SimulationEvent event: events) {
			if(event.event == SimulationEvent.EventType.CustomerPlacedOrder) {
				orders++;
			}
		}
		
		if(orders>customers) {
			custOrder = false;
		}
		
		return custOrder;
	}
	
	//Eater should not leave coffee shop until order is received
	private static boolean validateCustReceiveOrder(List<SimulationEvent> events, int customers) {
		//boolean custOrder = true;
		Customer customer=null;
		int receivedIndex=0;
		int leftIndex=0;
		
		for(SimulationEvent event: events) {
			if(event.event == SimulationEvent.EventType.CustomerLeavingCoffeeShop) {
				customer = event.customer;
				leftIndex=events.indexOf(event);
			}
			if(event.event == SimulationEvent.EventType.CustomerLeavingCoffeeShop) {
				if(event.customer==customer) {
					receivedIndex= events.indexOf(event);
				}
				
			}
			if(receivedIndex > leftIndex) {
				return false;
			}
		}
		
		return true;
	}
	
	
	
}
